type Post {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  channel: Channel!
  title: String
  text: String!
  type: PostType!
  author: User! @relation(name: "Posts")
  reactions: [Reaction!]!
  with: [Tag!]!
  location: Location
  visibility: VisibilityFilter! @default(value: "Public")
  exclude: [Friend!]!
  media: [Media!]!
  ip: String!
}

enum PostType {
  Status
  Thread
  Message
}

type Location {
  id: ID! @unique
  name: String!
  latitude: Float!
  longitude: Float!
}

type Media {
  id: ID! @unique
  type: MediaType! @default(value: "Photo")
  url: String! @unique
}

enum MediaType {
  Photo
  Video
  Link
}

enum VisibilityFilter {
  Public
  Acquaintences
  Friends
  Family
  Custom
  Private
}

type Server {
  id: ID! @unique
  icon: Icon
  banner: Banner
  name: String! @unique
  type: ServerType!
  channels: [Channel!]!
  owner: Admin!
  members: [User!]!
}

type Icon {
  image: Media
}

type Banner {
  image: Media
}

type Avatar {
  image: Media
}

enum ServerType {
  FriendsList
  Profile
  Community
}

type Channel {
  id: ID! @unique
  server: Server!
  name: String!
  type: ChannelType!
  posts: [Post!]!
}

enum ChannelType {
  Inbox
  Feed
  Board
  Chat
  Voice
}

type Admin {
  server: Server!
  user: User!
}

type User {
  id: ID! @unique
  avatar: Avatar
  username: String! @unique
  email: String! @unique
  password: String!
  firstName: String!
  lastName: String!
  type: UserType! @default(value: "Registered")
  posts: [Post!]! @relation(name: "Posts")
  tags: [Tag!]!
  friends: [Friend!]!
  followers: [User!]! @relation(name: "Followers")
  following: [User!]! @relation(name: "Followers")
}

enum UserType {
  Anonymous
  Registered
  Verified
}

type Tag {
  createdAt: DateTime!
  user: User!
  post: Post!
}

type Friend {
  createdAt: DateTime!
  user: User!
  relationship: Relationship!
}

enum Relationship {
  Acquaintence
  Friend
  Close
  Family
}

type Reaction {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  by: User!
  type: Emoji!
}

type Emoji {
  id: ID! @unique
  name: String! @Unique
  code: String!
  image: String!
  type: EmojiType! @default(value: "Basic")
  premium: Boolean! @default(value: "false")
}

enum EmojiType {
  Basic
  Limited
  Custom
}
